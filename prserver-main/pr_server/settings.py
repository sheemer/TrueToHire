"""
Django settings for pr_server project.

Generated by 'django-admin startproject' using Django 5.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""
import os
from pathlib import Path
from dotenv import load_dotenv
import psycopg
from django.contrib.auth.decorators import login_required
from django.contrib.admin import AdminSite
import logging
from csp.constants import SELF

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

def get_secret(name, default=""):
    """Helper function to read Docker secrets"""
    secret_path = f"/run/secrets/{name}"
    try:
        with open(secret_path, "r") as f:
            return f.read().strip()
    except FileNotFoundError:
        return default

AWS_REGION = get_secret("AWS_REGION")
AWS_ACCESS_KEY_ID = get_secret("AWS_ACCESS_KEY_ID")
AWS_SECRET_ACCESS_KEY = get_secret("AWS_SECRET_ACCESS_KEY")
DB_HOST = get_secret("DB_HOST")
DB_USER = get_secret("DB_USER")
DATABASE_PASSWORD = get_secret("DATABASE_PASSWORD")

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = get_secret("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = [ 
    '*',   ]
SITE_ID = 1

AUTH_USER_MODEL = 'accounts.CustomUser'

AUTHENTICATION_BACKENDS = [
    'allauth.account.auth_backends.AuthenticationBackend',
]

AdminSite.has_permission = lambda self, request: request.user.is_active and request.user.is_superuser

# Application definition

INSTALLED_APPS = [
    "home.apps.HomeConfig",
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'accounts',
    'dashboard',
    'windows_test_rooms',
    'video_playback',
    'background_task',
    'linux_test_rooms',
    'contactus',
    'django.contrib.sites',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'two_factor',
    'allauth_2fa',
    'django_otp',
    'django_otp.plugins.otp_totp',
    'gunicorn',
    'csp',      
    'django_otp.plugins.otp_static', 
    'corsheaders',
    'customimage',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'csp.middleware.CSPMiddleware', 
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'allauth.account.middleware.AccountMiddleware',
    'allauth_2fa.middleware.AllauthTwoFactorMiddleware',
    'django_otp.middleware.OTPMiddleware',

]
ROOT_URLCONF = 'pr_server.urls'

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]
WSGI_APPLICATION = 'pr_server.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases


DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': 'BigBoss+',
        'USER': 'tim',
        'PASSWORD': get_secret("web_postgres_password"),
        'HOST': 'guac_webdb',
        'PORT':  '5432',  # Default to 5432
        'OPTIONS': {
            'client_encoding': 'utf8',
        },
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]
CONTENT_SECURITY_POLICY = {
    "DIRECTIVES": {
        "default-src": ["none"],
        "img-src": [SELF, "data:"],
        "connect-src": [SELF,],
        'font-src': [SELF, 'https://fonts.gstatic.com'],
        'form-action': [SELF],
        'frame-ancestors': [SELF,],
        'frame-src': [SELF,],
        'img-src': [SELF, 'data:'],
        'media-src': [SELF,],
        'object-src': [SELF,],
        'script-src': [SELF,],
        'style-src': [SELF]
    },
}

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


STATIC_URL = '/static/'
STATICFILES_DIRS = [BASE_DIR / "static",
BASE_DIR / "accounts/static",  
BASE_DIR / "home/static",  
BASE_DIR / "dashboard/static",
]  
STATIC_ROOT = BASE_DIR / "staticfiles"  
STATICFILES_STORAGE = 'django.contrib.staticfiles.storage.StaticFilesStorage'
STATICFILES_FINDERS = [
    'django.contrib.staticfiles.finders.FileSystemFinder',  
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',]
LOGIN_REDIRECT_URL = "home"
LOGOUT_REDIRECT_URL = "home" 

MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

SESSION_COOKIE_SAMESITE = None 


ACCOUNT_AUTHENTICATION_METHOD = "username"
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_EMAIL_VERIFICATION = "optional"
# Ensure the 2FA login flow is used
ACCOUNT_ADAPTER = "allauth_2fa.adapter.TwoFactorAccountAdapter"

# Enforce 2FA for login
ALLAUTH_2FA_FORCE_ENROLLMENT = True


SECURE_BROWSER_XSS_FILTER = True
SECURE_CONTENT_TYPE_NOSNIFF = True

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': '/home/timango/app/logs/debug.log',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['file'],
            'level': 'DEBUG',
            'propagate': True,
        },
    },
}
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

SECURE_SSL_REDIRECT = True  # Redirect HTTP to HTTPS
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')  # Trust Nginx
CSRF_COOKIE_SECURE = True  # Ensure CSRF cookies are only sent over HTTPS
SESSION_COOKIE_SECURE = True  # Secure Django sessions
SECURE_HSTS_SECONDS = 31536000  # 1 year
SECURE_HSTS_INCLUDE_SUBDOMAINS = True
SECURE_HSTS_PRELOAD = True
X_FRAME_OPTIONS = "None"


EMAIL_BACKEND = "django_ses.SESBackend"
# AWS Credentials (use IAM with SES permissions)
AWS_ACCESS_KEY_ID = get_secret("AWS_ACCESS_KEY_ID")
AWS_SECRET_ACCESS_KEY = get_secret("AWS_SECRET_ACCESS_KEY")
AWS_SES_REGION_NAME = "us-east-1"  # Change this to your SES region
AWS_SES_REGION_ENDPOINT = f"email.{AWS_SES_REGION_NAME}.amazonaws.com"



